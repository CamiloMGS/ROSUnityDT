# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_unity_robotics/SetColorRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetColorRequest(genpy.Message):
  _md5sum = "2f12226348d323c2e5b2031b3da53f1b"
  _type = "ros_unity_robotics/SetColorRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string object_name
"""
  __slots__ = ['object_name']
  _slot_types = ['string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       object_name

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetColorRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.object_name is None:
        self.object_name = ''
    else:
      self.object_name = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.object_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.object_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.object_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.object_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.object_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_unity_robotics/SetColorResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_unity_robotics.msg

class SetColorResponse(genpy.Message):
  _md5sum = "64e52054352d8f7db2af4cfbf9cfe76d"
  _type = "ros_unity_robotics/SetColorResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool is_color_available
Color_Object set_color


================================================================================
MSG: ros_unity_robotics/Color_Object
int32 r
int32 g
int32 b
int32 a
string color_name
"""
  __slots__ = ['is_color_available','set_color']
  _slot_types = ['bool','ros_unity_robotics/Color_Object']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       is_color_available,set_color

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetColorResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.is_color_available is None:
        self.is_color_available = False
      if self.set_color is None:
        self.set_color = ros_unity_robotics.msg.Color_Object()
    else:
      self.is_color_available = False
      self.set_color = ros_unity_robotics.msg.Color_Object()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B4i().pack(_x.is_color_available, _x.set_color.r, _x.set_color.g, _x.set_color.b, _x.set_color.a))
      _x = self.set_color.color_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.set_color is None:
        self.set_color = ros_unity_robotics.msg.Color_Object()
      end = 0
      _x = self
      start = end
      end += 17
      (_x.is_color_available, _x.set_color.r, _x.set_color.g, _x.set_color.b, _x.set_color.a,) = _get_struct_B4i().unpack(str[start:end])
      self.is_color_available = bool(self.is_color_available)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.set_color.color_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.set_color.color_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B4i().pack(_x.is_color_available, _x.set_color.r, _x.set_color.g, _x.set_color.b, _x.set_color.a))
      _x = self.set_color.color_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.set_color is None:
        self.set_color = ros_unity_robotics.msg.Color_Object()
      end = 0
      _x = self
      start = end
      end += 17
      (_x.is_color_available, _x.set_color.r, _x.set_color.g, _x.set_color.b, _x.set_color.a,) = _get_struct_B4i().unpack(str[start:end])
      self.is_color_available = bool(self.is_color_available)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.set_color.color_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.set_color.color_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B4i = None
def _get_struct_B4i():
    global _struct_B4i
    if _struct_B4i is None:
        _struct_B4i = struct.Struct("<B4i")
    return _struct_B4i
class SetColor(object):
  _type          = 'ros_unity_robotics/SetColor'
  _md5sum = 'fbf49a4abb8329015706cddfa8925046'
  _request_class  = SetColorRequest
  _response_class = SetColorResponse
