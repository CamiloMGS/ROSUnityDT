// Generated by gencpp from file ros_unity_robotics/Color_Object.msg
// DO NOT EDIT!


#ifndef ROS_UNITY_ROBOTICS_MESSAGE_COLOR_OBJECT_H
#define ROS_UNITY_ROBOTICS_MESSAGE_COLOR_OBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_unity_robotics
{
template <class ContainerAllocator>
struct Color_Object_
{
  typedef Color_Object_<ContainerAllocator> Type;

  Color_Object_()
    : r(0)
    , g(0)
    , b(0)
    , a(0)
    , color_name()  {
    }
  Color_Object_(const ContainerAllocator& _alloc)
    : r(0)
    , g(0)
    , b(0)
    , a(0)
    , color_name(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _r_type;
  _r_type r;

   typedef int32_t _g_type;
  _g_type g;

   typedef int32_t _b_type;
  _b_type b;

   typedef int32_t _a_type;
  _a_type a;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _color_name_type;
  _color_name_type color_name;





  typedef boost::shared_ptr< ::ros_unity_robotics::Color_Object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_unity_robotics::Color_Object_<ContainerAllocator> const> ConstPtr;

}; // struct Color_Object_

typedef ::ros_unity_robotics::Color_Object_<std::allocator<void> > Color_Object;

typedef boost::shared_ptr< ::ros_unity_robotics::Color_Object > Color_ObjectPtr;
typedef boost::shared_ptr< ::ros_unity_robotics::Color_Object const> Color_ObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_unity_robotics::Color_Object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_unity_robotics::Color_Object_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_unity_robotics::Color_Object_<ContainerAllocator1> & lhs, const ::ros_unity_robotics::Color_Object_<ContainerAllocator2> & rhs)
{
  return lhs.r == rhs.r &&
    lhs.g == rhs.g &&
    lhs.b == rhs.b &&
    lhs.a == rhs.a &&
    lhs.color_name == rhs.color_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_unity_robotics::Color_Object_<ContainerAllocator1> & lhs, const ::ros_unity_robotics::Color_Object_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_unity_robotics

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_unity_robotics::Color_Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_unity_robotics::Color_Object_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_unity_robotics::Color_Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_unity_robotics::Color_Object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_unity_robotics::Color_Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_unity_robotics::Color_Object_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_unity_robotics::Color_Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7ed8425fc1461c60d2beb39175943ef9";
  }

  static const char* value(const ::ros_unity_robotics::Color_Object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7ed8425fc1461c60ULL;
  static const uint64_t static_value2 = 0xd2beb39175943ef9ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_unity_robotics::Color_Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_unity_robotics/Color_Object";
  }

  static const char* value(const ::ros_unity_robotics::Color_Object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_unity_robotics::Color_Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 r\n"
"int32 g\n"
"int32 b\n"
"int32 a\n"
"string color_name\n"
;
  }

  static const char* value(const ::ros_unity_robotics::Color_Object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_unity_robotics::Color_Object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.r);
      stream.next(m.g);
      stream.next(m.b);
      stream.next(m.a);
      stream.next(m.color_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Color_Object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_unity_robotics::Color_Object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_unity_robotics::Color_Object_<ContainerAllocator>& v)
  {
    s << indent << "r: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r);
    s << indent << "g: ";
    Printer<int32_t>::stream(s, indent + "  ", v.g);
    s << indent << "b: ";
    Printer<int32_t>::stream(s, indent + "  ", v.b);
    s << indent << "a: ";
    Printer<int32_t>::stream(s, indent + "  ", v.a);
    s << indent << "color_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.color_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_UNITY_ROBOTICS_MESSAGE_COLOR_OBJECT_H
