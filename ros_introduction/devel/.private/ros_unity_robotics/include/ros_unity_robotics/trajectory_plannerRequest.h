// Generated by gencpp from file ros_unity_robotics/trajectory_plannerRequest.msg
// DO NOT EDIT!


#ifndef ROS_UNITY_ROBOTICS_MESSAGE_TRAJECTORY_PLANNERREQUEST_H
#define ROS_UNITY_ROBOTICS_MESSAGE_TRAJECTORY_PLANNERREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_unity_robotics/Robot_Joints.h>
#include <geometry_msgs/Pose.h>

namespace ros_unity_robotics
{
template <class ContainerAllocator>
struct trajectory_plannerRequest_
{
  typedef trajectory_plannerRequest_<ContainerAllocator> Type;

  trajectory_plannerRequest_()
    : joints_input()
    , target_pose()  {
    }
  trajectory_plannerRequest_(const ContainerAllocator& _alloc)
    : joints_input(_alloc)
    , target_pose(_alloc)  {
  (void)_alloc;
    }



   typedef  ::ros_unity_robotics::Robot_Joints_<ContainerAllocator>  _joints_input_type;
  _joints_input_type joints_input;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _target_pose_type;
  _target_pose_type target_pose;





  typedef boost::shared_ptr< ::ros_unity_robotics::trajectory_plannerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_unity_robotics::trajectory_plannerRequest_<ContainerAllocator> const> ConstPtr;

}; // struct trajectory_plannerRequest_

typedef ::ros_unity_robotics::trajectory_plannerRequest_<std::allocator<void> > trajectory_plannerRequest;

typedef boost::shared_ptr< ::ros_unity_robotics::trajectory_plannerRequest > trajectory_plannerRequestPtr;
typedef boost::shared_ptr< ::ros_unity_robotics::trajectory_plannerRequest const> trajectory_plannerRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_unity_robotics::trajectory_plannerRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_unity_robotics::trajectory_plannerRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_unity_robotics::trajectory_plannerRequest_<ContainerAllocator1> & lhs, const ::ros_unity_robotics::trajectory_plannerRequest_<ContainerAllocator2> & rhs)
{
  return lhs.joints_input == rhs.joints_input &&
    lhs.target_pose == rhs.target_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_unity_robotics::trajectory_plannerRequest_<ContainerAllocator1> & lhs, const ::ros_unity_robotics::trajectory_plannerRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_unity_robotics

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_unity_robotics::trajectory_plannerRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_unity_robotics::trajectory_plannerRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_unity_robotics::trajectory_plannerRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_unity_robotics::trajectory_plannerRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_unity_robotics::trajectory_plannerRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_unity_robotics::trajectory_plannerRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_unity_robotics::trajectory_plannerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2a49b7d4f98da72ef139e2cfcd38f52d";
  }

  static const char* value(const ::ros_unity_robotics::trajectory_plannerRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2a49b7d4f98da72eULL;
  static const uint64_t static_value2 = 0xf139e2cfcd38f52dULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_unity_robotics::trajectory_plannerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_unity_robotics/trajectory_plannerRequest";
  }

  static const char* value(const ::ros_unity_robotics::trajectory_plannerRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_unity_robotics::trajectory_plannerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Robot_Joints joints_input\n"
"geometry_msgs/Pose target_pose\n"
"\n"
"================================================================================\n"
"MSG: ros_unity_robotics/Robot_Joints\n"
"float64[7] joints\n"
"geometry_msgs/Pose final_pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::ros_unity_robotics::trajectory_plannerRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_unity_robotics::trajectory_plannerRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joints_input);
      stream.next(m.target_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct trajectory_plannerRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_unity_robotics::trajectory_plannerRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_unity_robotics::trajectory_plannerRequest_<ContainerAllocator>& v)
  {
    s << indent << "joints_input: ";
    s << std::endl;
    Printer< ::ros_unity_robotics::Robot_Joints_<ContainerAllocator> >::stream(s, indent + "  ", v.joints_input);
    s << indent << "target_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.target_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_UNITY_ROBOTICS_MESSAGE_TRAJECTORY_PLANNERREQUEST_H
