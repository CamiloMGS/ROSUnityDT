// Generated by gencpp from file ros_unity_robotics/Robot_Joints.msg
// DO NOT EDIT!


#ifndef ROS_UNITY_ROBOTICS_MESSAGE_ROBOT_JOINTS_H
#define ROS_UNITY_ROBOTICS_MESSAGE_ROBOT_JOINTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace ros_unity_robotics
{
template <class ContainerAllocator>
struct Robot_Joints_
{
  typedef Robot_Joints_<ContainerAllocator> Type;

  Robot_Joints_()
    : joints()
    , final_pose()  {
      joints.assign(0.0);
  }
  Robot_Joints_(const ContainerAllocator& _alloc)
    : joints()
    , final_pose(_alloc)  {
  (void)_alloc;
      joints.assign(0.0);
  }



   typedef boost::array<double, 7>  _joints_type;
  _joints_type joints;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _final_pose_type;
  _final_pose_type final_pose;





  typedef boost::shared_ptr< ::ros_unity_robotics::Robot_Joints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_unity_robotics::Robot_Joints_<ContainerAllocator> const> ConstPtr;

}; // struct Robot_Joints_

typedef ::ros_unity_robotics::Robot_Joints_<std::allocator<void> > Robot_Joints;

typedef boost::shared_ptr< ::ros_unity_robotics::Robot_Joints > Robot_JointsPtr;
typedef boost::shared_ptr< ::ros_unity_robotics::Robot_Joints const> Robot_JointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_unity_robotics::Robot_Joints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_unity_robotics::Robot_Joints_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_unity_robotics::Robot_Joints_<ContainerAllocator1> & lhs, const ::ros_unity_robotics::Robot_Joints_<ContainerAllocator2> & rhs)
{
  return lhs.joints == rhs.joints &&
    lhs.final_pose == rhs.final_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_unity_robotics::Robot_Joints_<ContainerAllocator1> & lhs, const ::ros_unity_robotics::Robot_Joints_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_unity_robotics

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_unity_robotics::Robot_Joints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_unity_robotics::Robot_Joints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_unity_robotics::Robot_Joints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_unity_robotics::Robot_Joints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_unity_robotics::Robot_Joints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_unity_robotics::Robot_Joints_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_unity_robotics::Robot_Joints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d71637ec7bc0deeb68ee5d5ebe956a0e";
  }

  static const char* value(const ::ros_unity_robotics::Robot_Joints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd71637ec7bc0deebULL;
  static const uint64_t static_value2 = 0x68ee5d5ebe956a0eULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_unity_robotics::Robot_Joints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_unity_robotics/Robot_Joints";
  }

  static const char* value(const ::ros_unity_robotics::Robot_Joints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_unity_robotics::Robot_Joints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[7] joints\n"
"geometry_msgs/Pose final_pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::ros_unity_robotics::Robot_Joints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_unity_robotics::Robot_Joints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joints);
      stream.next(m.final_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Robot_Joints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_unity_robotics::Robot_Joints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_unity_robotics::Robot_Joints_<ContainerAllocator>& v)
  {
    s << indent << "joints[]" << std::endl;
    for (size_t i = 0; i < v.joints.size(); ++i)
    {
      s << indent << "  joints[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joints[i]);
    }
    s << indent << "final_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.final_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_UNITY_ROBOTICS_MESSAGE_ROBOT_JOINTS_H
