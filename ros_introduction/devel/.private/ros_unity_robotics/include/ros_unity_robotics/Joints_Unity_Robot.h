// Generated by gencpp from file ros_unity_robotics/Joints_Unity_Robot.msg
// DO NOT EDIT!


#ifndef ROS_UNITY_ROBOTICS_MESSAGE_JOINTS_UNITY_ROBOT_H
#define ROS_UNITY_ROBOTICS_MESSAGE_JOINTS_UNITY_ROBOT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>

namespace ros_unity_robotics
{
template <class ContainerAllocator>
struct Joints_Unity_Robot_
{
  typedef Joints_Unity_Robot_<ContainerAllocator> Type;

  Joints_Unity_Robot_()
    : Joints()
    , pick_pose()
    , place_pose()  {
    }
  Joints_Unity_Robot_(const ContainerAllocator& _alloc)
    : Joints(_alloc)
    , pick_pose(_alloc)
    , place_pose(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _Joints_type;
  _Joints_type Joints;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pick_pose_type;
  _pick_pose_type pick_pose;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _place_pose_type;
  _place_pose_type place_pose;





  typedef boost::shared_ptr< ::ros_unity_robotics::Joints_Unity_Robot_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_unity_robotics::Joints_Unity_Robot_<ContainerAllocator> const> ConstPtr;

}; // struct Joints_Unity_Robot_

typedef ::ros_unity_robotics::Joints_Unity_Robot_<std::allocator<void> > Joints_Unity_Robot;

typedef boost::shared_ptr< ::ros_unity_robotics::Joints_Unity_Robot > Joints_Unity_RobotPtr;
typedef boost::shared_ptr< ::ros_unity_robotics::Joints_Unity_Robot const> Joints_Unity_RobotConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_unity_robotics::Joints_Unity_Robot_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_unity_robotics::Joints_Unity_Robot_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_unity_robotics::Joints_Unity_Robot_<ContainerAllocator1> & lhs, const ::ros_unity_robotics::Joints_Unity_Robot_<ContainerAllocator2> & rhs)
{
  return lhs.Joints == rhs.Joints &&
    lhs.pick_pose == rhs.pick_pose &&
    lhs.place_pose == rhs.place_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_unity_robotics::Joints_Unity_Robot_<ContainerAllocator1> & lhs, const ::ros_unity_robotics::Joints_Unity_Robot_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_unity_robotics

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_unity_robotics::Joints_Unity_Robot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_unity_robotics::Joints_Unity_Robot_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_unity_robotics::Joints_Unity_Robot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_unity_robotics::Joints_Unity_Robot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_unity_robotics::Joints_Unity_Robot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_unity_robotics::Joints_Unity_Robot_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_unity_robotics::Joints_Unity_Robot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1b28a95cce78395503044b169092bcf3";
  }

  static const char* value(const ::ros_unity_robotics::Joints_Unity_Robot_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1b28a95cce783955ULL;
  static const uint64_t static_value2 = 0x03044b169092bcf3ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_unity_robotics::Joints_Unity_Robot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_unity_robotics/Joints_Unity_Robot";
  }

  static const char* value(const ::ros_unity_robotics::Joints_Unity_Robot_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_unity_robotics::Joints_Unity_Robot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] Joints\n"
"geometry_msgs/Pose pick_pose\n"
"geometry_msgs/Pose place_pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::ros_unity_robotics::Joints_Unity_Robot_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_unity_robotics::Joints_Unity_Robot_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Joints);
      stream.next(m.pick_pose);
      stream.next(m.place_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Joints_Unity_Robot_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_unity_robotics::Joints_Unity_Robot_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_unity_robotics::Joints_Unity_Robot_<ContainerAllocator>& v)
  {
    s << indent << "Joints[]" << std::endl;
    for (size_t i = 0; i < v.Joints.size(); ++i)
    {
      s << indent << "  Joints[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Joints[i]);
    }
    s << indent << "pick_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pick_pose);
    s << indent << "place_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.place_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_UNITY_ROBOTICS_MESSAGE_JOINTS_UNITY_ROBOT_H
