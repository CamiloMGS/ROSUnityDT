// Generated by gencpp from file ros_unity_robotics/SetColorResponse.msg
// DO NOT EDIT!


#ifndef ROS_UNITY_ROBOTICS_MESSAGE_SETCOLORRESPONSE_H
#define ROS_UNITY_ROBOTICS_MESSAGE_SETCOLORRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_unity_robotics/Color_Object.h>

namespace ros_unity_robotics
{
template <class ContainerAllocator>
struct SetColorResponse_
{
  typedef SetColorResponse_<ContainerAllocator> Type;

  SetColorResponse_()
    : is_color_available(false)
    , set_color()  {
    }
  SetColorResponse_(const ContainerAllocator& _alloc)
    : is_color_available(false)
    , set_color(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _is_color_available_type;
  _is_color_available_type is_color_available;

   typedef  ::ros_unity_robotics::Color_Object_<ContainerAllocator>  _set_color_type;
  _set_color_type set_color;





  typedef boost::shared_ptr< ::ros_unity_robotics::SetColorResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_unity_robotics::SetColorResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SetColorResponse_

typedef ::ros_unity_robotics::SetColorResponse_<std::allocator<void> > SetColorResponse;

typedef boost::shared_ptr< ::ros_unity_robotics::SetColorResponse > SetColorResponsePtr;
typedef boost::shared_ptr< ::ros_unity_robotics::SetColorResponse const> SetColorResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_unity_robotics::SetColorResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_unity_robotics::SetColorResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_unity_robotics::SetColorResponse_<ContainerAllocator1> & lhs, const ::ros_unity_robotics::SetColorResponse_<ContainerAllocator2> & rhs)
{
  return lhs.is_color_available == rhs.is_color_available &&
    lhs.set_color == rhs.set_color;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_unity_robotics::SetColorResponse_<ContainerAllocator1> & lhs, const ::ros_unity_robotics::SetColorResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_unity_robotics

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_unity_robotics::SetColorResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_unity_robotics::SetColorResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_unity_robotics::SetColorResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_unity_robotics::SetColorResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_unity_robotics::SetColorResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_unity_robotics::SetColorResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_unity_robotics::SetColorResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "64e52054352d8f7db2af4cfbf9cfe76d";
  }

  static const char* value(const ::ros_unity_robotics::SetColorResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x64e52054352d8f7dULL;
  static const uint64_t static_value2 = 0xb2af4cfbf9cfe76dULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_unity_robotics::SetColorResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_unity_robotics/SetColorResponse";
  }

  static const char* value(const ::ros_unity_robotics::SetColorResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_unity_robotics::SetColorResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool is_color_available\n"
"Color_Object set_color\n"
"\n"
"\n"
"================================================================================\n"
"MSG: ros_unity_robotics/Color_Object\n"
"int32 r\n"
"int32 g\n"
"int32 b\n"
"int32 a\n"
"string color_name\n"
;
  }

  static const char* value(const ::ros_unity_robotics::SetColorResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_unity_robotics::SetColorResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_color_available);
      stream.next(m.set_color);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetColorResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_unity_robotics::SetColorResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_unity_robotics::SetColorResponse_<ContainerAllocator>& v)
  {
    s << indent << "is_color_available: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_color_available);
    s << indent << "set_color: ";
    s << std::endl;
    Printer< ::ros_unity_robotics::Color_Object_<ContainerAllocator> >::stream(s, indent + "  ", v.set_color);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_UNITY_ROBOTICS_MESSAGE_SETCOLORRESPONSE_H
